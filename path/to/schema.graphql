# This file was generated. Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"whether this query should be cached (Hasura Cloud only)"
directive @cached(
    "refresh the cache entry"
    refresh: Boolean! = false,
    "measured in seconds"
    ttl: Int! = 60
) on QUERY

"columns and relationships of \"author\""
type author {
    "An array relationship"
    books(
        "distinct select on columns"
        distinct_on: [book_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [book_order_by!],
        "filter the rows returned"
        where: book_bool_exp
    ): [book!]!
    "An aggregate relationship"
    books_aggregate(
        "distinct select on columns"
        distinct_on: [book_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [book_order_by!],
        "filter the rows returned"
        where: book_bool_exp
    ): book_aggregate!
    id: uuid!
    name: String!
}

"aggregated selection of \"author\""
type author_aggregate {
    aggregate: author_aggregate_fields
    nodes: [author!]!
}

"aggregate fields of \"author\""
type author_aggregate_fields {
    count(columns: [author_select_column!], distinct: Boolean): Int!
    max: author_max_fields
    min: author_min_fields
}

"aggregate max on columns"
type author_max_fields {
    id: uuid
    name: String
}

"aggregate min on columns"
type author_min_fields {
    id: uuid
    name: String
}

"response of any mutation on the table \"author\""
type author_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [author!]!
}

"columns and relationships of \"book\""
type book {
    "An object relationship"
    author: author
    author_id: uuid!
    id: uuid!
    pages: Int!
    title: String!
    year: Int!
}

"aggregated selection of \"book\""
type book_aggregate {
    aggregate: book_aggregate_fields
    nodes: [book!]!
}

"aggregate fields of \"book\""
type book_aggregate_fields {
    avg: book_avg_fields
    count(columns: [book_select_column!], distinct: Boolean): Int!
    max: book_max_fields
    min: book_min_fields
    stddev: book_stddev_fields
    stddev_pop: book_stddev_pop_fields
    stddev_samp: book_stddev_samp_fields
    sum: book_sum_fields
    var_pop: book_var_pop_fields
    var_samp: book_var_samp_fields
    variance: book_variance_fields
}

"aggregate avg on columns"
type book_avg_fields {
    pages: Float
    year: Float
}

"aggregate max on columns"
type book_max_fields {
    author_id: uuid
    id: uuid
    pages: Int
    title: String
    year: Int
}

"aggregate min on columns"
type book_min_fields {
    author_id: uuid
    id: uuid
    pages: Int
    title: String
    year: Int
}

"response of any mutation on the table \"book\""
type book_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [book!]!
}

"aggregate stddev on columns"
type book_stddev_fields {
    pages: Float
    year: Float
}

"aggregate stddev_pop on columns"
type book_stddev_pop_fields {
    pages: Float
    year: Float
}

"aggregate stddev_samp on columns"
type book_stddev_samp_fields {
    pages: Float
    year: Float
}

"aggregate sum on columns"
type book_sum_fields {
    pages: Int
    year: Int
}

"aggregate var_pop on columns"
type book_var_pop_fields {
    pages: Float
    year: Float
}

"aggregate var_samp on columns"
type book_var_samp_fields {
    pages: Float
    year: Float
}

"aggregate variance on columns"
type book_variance_fields {
    pages: Float
    year: Float
}

"mutation root"
type mutation_root {
    "delete data from the table: \"author\""
    delete_author(
        "filter the rows which have to be deleted"
        where: author_bool_exp!
    ): author_mutation_response
    "delete single row from the table: \"author\""
    delete_author_by_pk(id: uuid!): author
    "delete data from the table: \"book\""
    delete_book(
        "filter the rows which have to be deleted"
        where: book_bool_exp!
    ): book_mutation_response
    "delete single row from the table: \"book\""
    delete_book_by_pk(id: uuid!): book
    "delete data from the table: \"user\""
    delete_user(
        "filter the rows which have to be deleted"
        where: user_bool_exp!
    ): user_mutation_response
    "delete single row from the table: \"user\""
    delete_user_by_pk(id: uuid!): user
    "insert data into the table: \"author\""
    insert_author(
        "the rows to be inserted"
        objects: [author_insert_input!]!,
        "upsert condition"
        on_conflict: author_on_conflict
    ): author_mutation_response
    "insert a single row into the table: \"author\""
    insert_author_one(
        "the row to be inserted"
        object: author_insert_input!,
        "upsert condition"
        on_conflict: author_on_conflict
    ): author
    "insert data into the table: \"book\""
    insert_book(
        "the rows to be inserted"
        objects: [book_insert_input!]!,
        "upsert condition"
        on_conflict: book_on_conflict
    ): book_mutation_response
    "insert a single row into the table: \"book\""
    insert_book_one(
        "the row to be inserted"
        object: book_insert_input!,
        "upsert condition"
        on_conflict: book_on_conflict
    ): book
    "insert data into the table: \"user\""
    insert_user(
        "the rows to be inserted"
        objects: [user_insert_input!]!,
        "upsert condition"
        on_conflict: user_on_conflict
    ): user_mutation_response
    "insert a single row into the table: \"user\""
    insert_user_one(
        "the row to be inserted"
        object: user_insert_input!,
        "upsert condition"
        on_conflict: user_on_conflict
    ): user
    "update data of the table: \"author\""
    update_author(
        "sets the columns of the filtered rows to the given values"
        _set: author_set_input,
        "filter the rows which have to be updated"
        where: author_bool_exp!
    ): author_mutation_response
    "update single row of the table: \"author\""
    update_author_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: author_set_input,
        pk_columns: author_pk_columns_input!
    ): author
    "update multiples rows of table: \"author\""
    update_author_many(
        "updates to execute, in order"
        updates: [author_updates!]!
    ): [author_mutation_response]
    "update data of the table: \"book\""
    update_book(
        "increments the numeric columns with given value of the filtered values"
        _inc: book_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: book_set_input,
        "filter the rows which have to be updated"
        where: book_bool_exp!
    ): book_mutation_response
    "update single row of the table: \"book\""
    update_book_by_pk(
        "increments the numeric columns with given value of the filtered values"
        _inc: book_inc_input,
        "sets the columns of the filtered rows to the given values"
        _set: book_set_input,
        pk_columns: book_pk_columns_input!
    ): book
    "update multiples rows of table: \"book\""
    update_book_many(
        "updates to execute, in order"
        updates: [book_updates!]!
    ): [book_mutation_response]
    "update data of the table: \"user\""
    update_user(
        "sets the columns of the filtered rows to the given values"
        _set: user_set_input,
        "filter the rows which have to be updated"
        where: user_bool_exp!
    ): user_mutation_response
    "update single row of the table: \"user\""
    update_user_by_pk(
        "sets the columns of the filtered rows to the given values"
        _set: user_set_input,
        pk_columns: user_pk_columns_input!
    ): user
    "update multiples rows of table: \"user\""
    update_user_many(
        "updates to execute, in order"
        updates: [user_updates!]!
    ): [user_mutation_response]
}

type query_root {
    "fetch data from the table: \"author\""
    author(
        "distinct select on columns"
        distinct_on: [author_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [author_order_by!],
        "filter the rows returned"
        where: author_bool_exp
    ): [author!]!
    "fetch aggregated fields from the table: \"author\""
    author_aggregate(
        "distinct select on columns"
        distinct_on: [author_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [author_order_by!],
        "filter the rows returned"
        where: author_bool_exp
    ): author_aggregate!
    "fetch data from the table: \"author\" using primary key columns"
    author_by_pk(id: uuid!): author
    "fetch data from the table: \"book\""
    book(
        "distinct select on columns"
        distinct_on: [book_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [book_order_by!],
        "filter the rows returned"
        where: book_bool_exp
    ): [book!]!
    "fetch aggregated fields from the table: \"book\""
    book_aggregate(
        "distinct select on columns"
        distinct_on: [book_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [book_order_by!],
        "filter the rows returned"
        where: book_bool_exp
    ): book_aggregate!
    "fetch data from the table: \"book\" using primary key columns"
    book_by_pk(id: uuid!): book
    "fetch data from the table: \"user\""
    user(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
    "fetch aggregated fields from the table: \"user\""
    user_aggregate(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): user_aggregate!
    "fetch data from the table: \"user\" using primary key columns"
    user_by_pk(id: uuid!): user
}

type subscription_root {
    "fetch data from the table: \"author\""
    author(
        "distinct select on columns"
        distinct_on: [author_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [author_order_by!],
        "filter the rows returned"
        where: author_bool_exp
    ): [author!]!
    "fetch aggregated fields from the table: \"author\""
    author_aggregate(
        "distinct select on columns"
        distinct_on: [author_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [author_order_by!],
        "filter the rows returned"
        where: author_bool_exp
    ): author_aggregate!
    "fetch data from the table: \"author\" using primary key columns"
    author_by_pk(id: uuid!): author
    "fetch data from the table in a streaming manner: \"author\""
    author_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [author_stream_cursor_input]!,
        "filter the rows returned"
        where: author_bool_exp
    ): [author!]!
    "fetch data from the table: \"book\""
    book(
        "distinct select on columns"
        distinct_on: [book_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [book_order_by!],
        "filter the rows returned"
        where: book_bool_exp
    ): [book!]!
    "fetch aggregated fields from the table: \"book\""
    book_aggregate(
        "distinct select on columns"
        distinct_on: [book_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [book_order_by!],
        "filter the rows returned"
        where: book_bool_exp
    ): book_aggregate!
    "fetch data from the table: \"book\" using primary key columns"
    book_by_pk(id: uuid!): book
    "fetch data from the table in a streaming manner: \"book\""
    book_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [book_stream_cursor_input]!,
        "filter the rows returned"
        where: book_bool_exp
    ): [book!]!
    "fetch data from the table: \"user\""
    user(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
    "fetch aggregated fields from the table: \"user\""
    user_aggregate(
        "distinct select on columns"
        distinct_on: [user_select_column!],
        "limit the number of rows returned"
        limit: Int,
        "skip the first n rows. Use only with order_by"
        offset: Int,
        "sort the rows by one or more columns"
        order_by: [user_order_by!],
        "filter the rows returned"
        where: user_bool_exp
    ): user_aggregate!
    "fetch data from the table: \"user\" using primary key columns"
    user_by_pk(id: uuid!): user
    "fetch data from the table in a streaming manner: \"user\""
    user_stream(
        "maximum number of rows returned in a single batch"
        batch_size: Int!,
        "cursor to stream the results returned by the query"
        cursor: [user_stream_cursor_input]!,
        "filter the rows returned"
        where: user_bool_exp
    ): [user!]!
}

"columns and relationships of \"user\""
type user {
    id: uuid!
    name: String!
    password: String!
}

"aggregated selection of \"user\""
type user_aggregate {
    aggregate: user_aggregate_fields
    nodes: [user!]!
}

"aggregate fields of \"user\""
type user_aggregate_fields {
    count(columns: [user_select_column!], distinct: Boolean): Int!
    max: user_max_fields
    min: user_min_fields
}

"aggregate max on columns"
type user_max_fields {
    id: uuid
    name: String
    password: String
}

"aggregate min on columns"
type user_min_fields {
    id: uuid
    name: String
    password: String
}

"response of any mutation on the table \"user\""
type user_mutation_response {
    "number of rows affected by the mutation"
    affected_rows: Int!
    "data from the rows affected by the mutation"
    returning: [user!]!
}

"unique or primary key constraints on table \"author\""
enum author_constraint {
    "unique or primary key constraint on columns \"id\""
    author_pkey
}

"select columns of table \"author\""
enum author_select_column {
    "column name"
    id
    "column name"
    name
}

"update columns of table \"author\""
enum author_update_column {
    "column name"
    id
    "column name"
    name
}

"unique or primary key constraints on table \"book\""
enum book_constraint {
    "unique or primary key constraint on columns \"id\""
    book_pkey
}

"select columns of table \"book\""
enum book_select_column {
    "column name"
    author_id
    "column name"
    id
    "column name"
    pages
    "column name"
    title
    "column name"
    year
}

"update columns of table \"book\""
enum book_update_column {
    "column name"
    author_id
    "column name"
    id
    "column name"
    pages
    "column name"
    title
    "column name"
    year
}

"ordering argument of a cursor"
enum cursor_ordering {
    "ascending ordering of the cursor"
    ASC
    "descending ordering of the cursor"
    DESC
}

"column ordering options"
enum order_by {
    "in ascending order, nulls last"
    asc
    "in ascending order, nulls first"
    asc_nulls_first
    "in ascending order, nulls last"
    asc_nulls_last
    "in descending order, nulls first"
    desc
    "in descending order, nulls first"
    desc_nulls_first
    "in descending order, nulls last"
    desc_nulls_last
}

"unique or primary key constraints on table \"user\""
enum user_constraint {
    "unique or primary key constraint on columns \"id\""
    user_pkey
}

"select columns of table \"user\""
enum user_select_column {
    "column name"
    id
    "column name"
    name
    "column name"
    password
}

"update columns of table \"user\""
enum user_update_column {
    "column name"
    id
    "column name"
    name
    "column name"
    password
}

scalar uuid

"Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'."
input Int_comparison_exp {
    _eq: Int
    _gt: Int
    _gte: Int
    _in: [Int!]
    _is_null: Boolean
    _lt: Int
    _lte: Int
    _neq: Int
    _nin: [Int!]
}

"Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    "does the column match the given case-insensitive pattern"
    _ilike: String
    _in: [String!]
    "does the column match the given POSIX regular expression, case insensitive"
    _iregex: String
    _is_null: Boolean
    "does the column match the given pattern"
    _like: String
    _lt: String
    _lte: String
    _neq: String
    "does the column NOT match the given case-insensitive pattern"
    _nilike: String
    _nin: [String!]
    "does the column NOT match the given POSIX regular expression, case insensitive"
    _niregex: String
    "does the column NOT match the given pattern"
    _nlike: String
    "does the column NOT match the given POSIX regular expression, case sensitive"
    _nregex: String
    "does the column NOT match the given SQL regular expression"
    _nsimilar: String
    "does the column match the given POSIX regular expression, case sensitive"
    _regex: String
    "does the column match the given SQL regular expression"
    _similar: String
}

"Boolean expression to filter rows from the table \"author\". All fields are combined with a logical 'AND'."
input author_bool_exp {
    _and: [author_bool_exp!]
    _not: author_bool_exp
    _or: [author_bool_exp!]
    books: book_bool_exp
    books_aggregate: book_aggregate_bool_exp
    id: uuid_comparison_exp
    name: String_comparison_exp
}

"input type for inserting data into table \"author\""
input author_insert_input {
    books: book_arr_rel_insert_input
    id: uuid
    name: String
}

"input type for inserting object relation for remote table \"author\""
input author_obj_rel_insert_input {
    data: author_insert_input!
    "upsert condition"
    on_conflict: author_on_conflict
}

"on_conflict condition type for table \"author\""
input author_on_conflict {
    constraint: author_constraint!
    update_columns: [author_update_column!]! = []
    where: author_bool_exp
}

"Ordering options when selecting data from \"author\"."
input author_order_by {
    books_aggregate: book_aggregate_order_by
    id: order_by
    name: order_by
}

"primary key columns input for table: author"
input author_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"author\""
input author_set_input {
    id: uuid
    name: String
}

"Streaming cursor of the table \"author\""
input author_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: author_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input author_stream_cursor_value_input {
    id: uuid
    name: String
}

input author_updates {
    "sets the columns of the filtered rows to the given values"
    _set: author_set_input
    "filter the rows which have to be updated"
    where: author_bool_exp!
}

input book_aggregate_bool_exp {
    count: book_aggregate_bool_exp_count
}

input book_aggregate_bool_exp_count {
    arguments: [book_select_column!]
    distinct: Boolean
    filter: book_bool_exp
    predicate: Int_comparison_exp!
}

"order by aggregate values of table \"book\""
input book_aggregate_order_by {
    avg: book_avg_order_by
    count: order_by
    max: book_max_order_by
    min: book_min_order_by
    stddev: book_stddev_order_by
    stddev_pop: book_stddev_pop_order_by
    stddev_samp: book_stddev_samp_order_by
    sum: book_sum_order_by
    var_pop: book_var_pop_order_by
    var_samp: book_var_samp_order_by
    variance: book_variance_order_by
}

"input type for inserting array relation for remote table \"book\""
input book_arr_rel_insert_input {
    data: [book_insert_input!]!
    "upsert condition"
    on_conflict: book_on_conflict
}

"order by avg() on columns of table \"book\""
input book_avg_order_by {
    pages: order_by
    year: order_by
}

"Boolean expression to filter rows from the table \"book\". All fields are combined with a logical 'AND'."
input book_bool_exp {
    _and: [book_bool_exp!]
    _not: book_bool_exp
    _or: [book_bool_exp!]
    author: author_bool_exp
    author_id: uuid_comparison_exp
    id: uuid_comparison_exp
    pages: Int_comparison_exp
    title: String_comparison_exp
    year: Int_comparison_exp
}

"input type for incrementing numeric columns in table \"book\""
input book_inc_input {
    pages: Int
    year: Int
}

"input type for inserting data into table \"book\""
input book_insert_input {
    author: author_obj_rel_insert_input
    author_id: uuid
    id: uuid
    pages: Int
    title: String
    year: Int
}

"order by max() on columns of table \"book\""
input book_max_order_by {
    author_id: order_by
    id: order_by
    pages: order_by
    title: order_by
    year: order_by
}

"order by min() on columns of table \"book\""
input book_min_order_by {
    author_id: order_by
    id: order_by
    pages: order_by
    title: order_by
    year: order_by
}

"on_conflict condition type for table \"book\""
input book_on_conflict {
    constraint: book_constraint!
    update_columns: [book_update_column!]! = []
    where: book_bool_exp
}

"Ordering options when selecting data from \"book\"."
input book_order_by {
    author: author_order_by
    author_id: order_by
    id: order_by
    pages: order_by
    title: order_by
    year: order_by
}

"primary key columns input for table: book"
input book_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"book\""
input book_set_input {
    author_id: uuid
    id: uuid
    pages: Int
    title: String
    year: Int
}

"order by stddev() on columns of table \"book\""
input book_stddev_order_by {
    pages: order_by
    year: order_by
}

"order by stddev_pop() on columns of table \"book\""
input book_stddev_pop_order_by {
    pages: order_by
    year: order_by
}

"order by stddev_samp() on columns of table \"book\""
input book_stddev_samp_order_by {
    pages: order_by
    year: order_by
}

"Streaming cursor of the table \"book\""
input book_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: book_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input book_stream_cursor_value_input {
    author_id: uuid
    id: uuid
    pages: Int
    title: String
    year: Int
}

"order by sum() on columns of table \"book\""
input book_sum_order_by {
    pages: order_by
    year: order_by
}

input book_updates {
    "increments the numeric columns with given value of the filtered values"
    _inc: book_inc_input
    "sets the columns of the filtered rows to the given values"
    _set: book_set_input
    "filter the rows which have to be updated"
    where: book_bool_exp!
}

"order by var_pop() on columns of table \"book\""
input book_var_pop_order_by {
    pages: order_by
    year: order_by
}

"order by var_samp() on columns of table \"book\""
input book_var_samp_order_by {
    pages: order_by
    year: order_by
}

"order by variance() on columns of table \"book\""
input book_variance_order_by {
    pages: order_by
    year: order_by
}

"Boolean expression to filter rows from the table \"user\". All fields are combined with a logical 'AND'."
input user_bool_exp {
    _and: [user_bool_exp!]
    _not: user_bool_exp
    _or: [user_bool_exp!]
    id: uuid_comparison_exp
    name: String_comparison_exp
    password: String_comparison_exp
}

"input type for inserting data into table \"user\""
input user_insert_input {
    id: uuid
    name: String
    password: String
}

"on_conflict condition type for table \"user\""
input user_on_conflict {
    constraint: user_constraint!
    update_columns: [user_update_column!]! = []
    where: user_bool_exp
}

"Ordering options when selecting data from \"user\"."
input user_order_by {
    id: order_by
    name: order_by
    password: order_by
}

"primary key columns input for table: user"
input user_pk_columns_input {
    id: uuid!
}

"input type for updating data in table \"user\""
input user_set_input {
    id: uuid
    name: String
    password: String
}

"Streaming cursor of the table \"user\""
input user_stream_cursor_input {
    "Stream column input with initial value"
    initial_value: user_stream_cursor_value_input!
    "cursor ordering"
    ordering: cursor_ordering
}

"Initial value of the column from where the streaming should start"
input user_stream_cursor_value_input {
    id: uuid
    name: String
    password: String
}

input user_updates {
    "sets the columns of the filtered rows to the given values"
    _set: user_set_input
    "filter the rows which have to be updated"
    where: user_bool_exp!
}

"Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}
